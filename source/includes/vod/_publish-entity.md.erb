## Publish entity to CDN


> REQUEST

```shell
curl -X POST \
  '<%= config[:endpoint] %>/media/entity/publish' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "<%= config[:entity_publish_id] %>"
}'
```

```ruby
require "uiza"

Uiza.app_id = "<%= config[:app_id] %>"
Uiza.authorization = "<%= config[:token] %>"

begin
  response = Uiza::Entity.publish "<%= config[:entity_publish_id] %>"
  puts response.message
  puts response.entityId
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.entity import Entity
from uiza.exceptions import ServerException

uiza.app_id = "<%= config[:app_id] %>"
uiza.authorization = "<%= config[:token] %>"

try:
  res, status_code = Entity().publish(id="<%= config[:entity_publish_id] %>")

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAppId("<%= config[:app_id] %>");
Uiza\Base::setAuthorization("<%= config[:token] %>");

try {
  $response = Uiza\Entity::publish(["id" => "<%= config[:entity_publish_id] %>"]);

  print_r($response);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Entity;
import io.uiza.model.Entity.*;

public class Main {

  public static void main(String[] args) {
    Uiza.appId = "<%= config[:app_id] %>";
    Uiza.authorization = "<%= config[:token] %>";

    try {
      JsonObject response = Entity.publish("<%= config[:entity_publish_id] %>");
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.app_id('<%= config[:app_id] %>');
uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:entity_publish_id] %>'
};

uiza.entity.publish(params)
  .then((res) => {
    // Identifier of task publish
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/entity"
)

func init() {
  Uiza.AppID = "<%= config[:app_id] %>"
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.EntityPublishParams{ID: uiza.String("<%= config[:entity_publish_id] %>")}
response, err := entity.Publish(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>",
  AppId = "<%= config[:app_id] %>"
});

try
{
  var result = UizaServices.Entity.Publish("<%= config[:entity_publish_id] %>");

  Console.WriteLine(string.Format("Publish Entity Success : entityId = {0} ", result.Data.entityId));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

All entities need to be [published](#publish-entity-to-cdn) before the public can access. Unpublished videos can still be [edited](#update-an-entity), [listed](#list-entities) by `API` or using `Dashboard` but [Player](#Player) will not play.

```If you use Uiza's `Quick Start` on App's dashboard it will get published automatically.```

> RESPONSE

```json
{
  "id": "<%= config[:entity_publish_id] %>",
  "message": "Your entity started publish, check process status with this entity ID",
  "entityId": "42ceb1ab-18ef-4f2e-b076-14299756d182"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/entity/publish```

**ARGUMENTS**

| Parameter | Description | Required |
| -------------- | ----------- | ------------- |
| **id** *string* | Identifier of entity | **Yes** |


**RETURNS**

Return an identifier of the publishing request. Use `id` to [retrieve publishing status](#get-publish-status). The publishing process should take a few minutes to complete, varies by video's size and length.

| Attribute   | Description |
|-------------|-------------------------|
| **id** *string* | The identifier of the publishing request |
| **message** *string* | Detail message of the publishing request |
| **entityId** *string* | The identifier of entity |
