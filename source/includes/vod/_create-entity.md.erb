## Create entity


> REQUEST

```shell
curl -X POST \
  '<%= config[:endpoint] %>/media/entity' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "The Evolution of Dance",
    "url": "<%= config[:sample_video] %>",
    "inputType": "http",
    "description": "Judson Laipply did a fantastic job in performing various dance moves",
    "shortDescription": "How good a dancer can you be?",
    "poster": "<%= config[:sample_poster] %>",
    "thumbnail": "<%= config[:sample_thumbnail] %>",
    "metadataId": "16a9e425-efb0-4360-bd92-8d49da111e88",
    "extendMetadata": {
        "movie_category":"action",
        "imdb_score":8.8,
        "published_year":"2018"
    },
    "embedMetadata": {
        "artist":"John Doe",
        "album":"Album sample",
        "genre":"Pop"
    },
    "metadataIds":["16a9e425-efb0-4360-bd92-8d49da111e88"]
}'
```

```ruby
require "uiza"

Uiza.app_id = "<%= config[:app_id] %>"
Uiza.authorization = "<%= config[:token] %>"

params = {
  name: "<%= config[:entity_create_name] %>",
  url: "<%= config[:entity_create_url] %>",
  inputType: "<%= config[:entity_create_input_type] %>",
  description: "<%= config[:entity_create_description] %>",
  shortDescription: "<%= config[:entity_create_short_description] %>"
}

begin
  entity = Uiza::Entity.create params
  puts entity.id
  puts entity.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.entity import Entity
from uiza.exceptions import ServerException

uiza.app_id = "<%= config[:app_id] %>"
uiza.authorization = "<%= config[:token] %>"

entity_data = {
  "name": "<%= config[:entity_create_name] %>",
  "url": "<%= config[:entity_create_url] %>",
  "inputType": "<%= config[:entity_create_input_type] %>",
  "description": "<%= config[:entity_create_description] %>",
  "shortDescription": "<%= config[:entity_create_short_description] %>"
}

try:
  res, status_code = Entity().create(**entity_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAppId("<%= config[:app_id] %>");
Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "name" => "<%= config[:entity_create_name] %>",
  "url" => "<%= config[:entity_create_url] %>",
  "inputType" => "<%= config[:entity_create_input_type] %>",
  "description" => "<%= config[:entity_create_description] %>",
  "shortDescription" => "<%= config[:entity_create_short_description] %>"
];

try {
  $entity = Uiza\Entity::create($params);

  print_r($entity);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
 ?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Entity;
import io.uiza.model.Entity.*;

public class Main {

  public static void main(String[] args) {
    Uiza.appId = "<%= config[:app_id] %>";
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("name", "<%= config[:entity_create_name] %>");
    params.put("url", "<%= config[:entity_create_url] %>");
    params.put("inputType", InputType.HTTP.toString());
    params.put("description", "<%= config[:entity_create_description] %>");
    params.put("shortDescription", "<%= config[:entity_create_short_description] %>");

    try {
      JsonObject response = Entity.create(params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.app_id('<%= config[:app_id] %>');
uiza.authorization('<%= config[:token] %>');

const params = {
  'name': '<%= config[:entity_create_name] %>',
  'url': '<%= config[:entity_create_url] %>',
  'inputType': '<%= config[:entity_create_input_type] %>',
  'description': '<%= config[:entity_create_description] %>',
  'shortDescription': '<%= config[:entity_create_short_description] %>'
};

uiza.entity.create(params)
  .then((res) => {
    //Identifier of entity has been created
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/entity"
)

func init() {
  Uiza.AppID = "<%= config[:app_id] %>"
  Uiza.Authorization = "<%= config[:token] %>"
}

params :=  &uiza.EntityCreateParams{
  Name: uiza.String("<%= config[:entity_create_name] %>"),
  URL: uiza.String("<%= config[:entity_create_url] %>"),
  InputType: uiza.String("<%= config[:entity_create_input_type] %>"),
  Description: uiza.String("<%= config[:entity_create_description] %>"),
  ShortDescription: uiza.String("<%= config[:entity_create_short_description] %>")
}

response, err := entity.Create(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>",
  AppId = "<%= config[:app_id] %>"
});

try
{
  var result = UizaServices.Entity.Create(new CreateEntityParameter()
  {
    Name = "<%= config[:entity_create_name] %>",
    InputType = "<%= config[:entity_create_input_type] %>",
    Description = "<%= config[:entity_create_description] %>",
    ShortDescription = "<%= config[:entity_create_short_description] %>",
    URL = "<%= config[:entity_create_url] %>"
  });
  Console.WriteLine(string.Format("Create New Entity Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

Entities can be created with the following types of link: HTTP, FTP, S3.

```text
With S3 URL, it must be public accessible.
```

> RESPONSE

```json
{
  "id": "<%= config[:entity_create_id] %>"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/entity```

**Entity Object**

| Attribute | Description | Required |
| ------------- | ------------- | ------------- |
| **name** *string* | The video's name, meant to be displayable to end users. | **Yes** |
| **url** *text* | URL of media file (HTTP/HTTPS, FTP, S3). Send **empty string** if you upload with SDK | **Yes** |
| **inputType** *enum* | Type of URL (Acceptable values: [ **http**&vert;**s3**&vert;**ftp**&vert;**s3-uiza** ] ). If `URL` is **empty**, this attribute must be **s3-uiza**  | **Yes** |
| **description** *text* | The video's description, meant to be displayable to end users. Can contain up to 65,535 characters. |  |
| **shortDescription** *text* | The video's short description, meant to be displayable to end users. Can contain up to 250 characters. |  |
| **metadataId** *array* | MetadataID is [Category](#category) ID |  |
| **poster** *string* | The video's poster `URL`, meant to be displayable to end users.  |  |
| **thumbnail** *string* | The video's thumbnail `URL`, meant to be displayable to end users. |  |
| **metadataIds** *array* | A list of categories for this entity. | |
| **extendMetadata** *object* | A set of key-value pairs that you can attach to a video object, meant to be displayable to end users. |  |
| **embedMetadata** *object* | A set of predefined key-value pairs that you can attach to a video object, meant to be displayable to end users. See [Embed Metadata](#embed-metadata). |  |





**RETURNS**

Returns an entity id if the call succeeded.

| Parameter   | Type   | Description |
|-------------|--------|-------------------------|
| **id** | *string* | The identifier of the created entity. |

```If you want to integrate with Uiza using AWS sdk to upload files to Uiza's storage. Please leave `URL` attribute **empty** and use `s3-uiza` for inputType attribute```
