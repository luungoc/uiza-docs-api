## Update storage

Update storage's information

> **Update a FTP a Storage**

> REQUEST

```shell
curl -X PUT \
  <%= config[:endpoint] %>/media/storage \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "<%= config[:storage_update_id] %>",
    "name": "<%= config[:storage_update_name] %>",
    "description": "<%= config[:storage_update_description] %>",
    "storageType": "<%= config[:storage_update_storage_type] %>",
    "host": "<%= config[:storage_update_host] %>",
    "username": "<%= config[:storage_update_username] %>",
    "password": "<%= config[:storage_update_password] %>",
    "port": <%= config[:storage_update_port] %>
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "<%= config[:storage_update_id] %>",
  name: "<%= config[:storage_update_name] %>",
  description: "<%= config[:storage_update_description] %>",
  storageType: "<%= config[:storage_update_storage_type] %>"
}

begin
  storage = Uiza::Storage.update params
  puts storage.id
  puts storage.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.storage import Storage
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

storage_data = {
  "id": "<%= config[:storage_update_id] %>",
  "name": "<%= config[:storage_update_name] %>",
  "description": "<%= config[:storage_update_description] %>",
  "storageType": "<%= config[:storage_update_storage_type] %>"
}

try:
  res, status_code = Storage().update(**storage_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "name" => "<%= config[:storage_update_name] %>",
  "description" => "<%= config[:storage_update_description] %>",
  "storageType" => "<%= config[:storage_update_storage_type] %>"
];

try {
  $storage = Uiza\Storage::update("<%= config[:storage_update_id] %>", $params);

  print_r($storage);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Storage;
import io.uiza.model.Storage.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("name", "<%= config[:storage_update_name] %>");
    params.put("description", "<%= config[:storage_update_description] %>");
    params.put("storageType", StorageType.FTP.toString());

    try {
      JsonObject response = Storage.update("<%= config[:storage_update_id] %>", params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:storage_update_id] %>',
  'name': '<%= config[:storage_update_name] %>',
  'description': '<%= config[:storage_update_description] %>',
  'storageType': '<%= config[:storage_update_storage_type] %>'
};

uiza.storage.update(params)
  .then((res) => {
    //Identifier of storage has been update
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/storage"
)

func init() {
  Uiza.Authorization = "<%= config[:token] %>"
}

params :=  &uiza.StorageUpdateParams{
  ID: uiza.String("<%= config[:storage_update_id] %>"),
  Name: uiza.String("<%= config[:storage_update_name] %>"),
  StorageType: "<%= config[:storage_update_storage_type] %>",
  Description: uiza.String("<%= config[:storage_update_description] %>"),
}

response, err := storage.Update(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = uizaServices.Storage.Update(new UpdateStorageParameter()
  {
    ID = "<%= config[:storage_update_id] %>",
    Name = "<%= config[:storage_add_fpt_name] %>",
    Description = "<%= config[:storage_add_fpt_description] %>",
    StorageType = "<%= config[:storage_add_fpt_storage_type] %>",
  });
  Console.WriteLine(string.Format("Update Storage Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
	var result = ex.UizaInnerException.Error;
}
```

> RESPONSE

```json
{
  "id": "<%= config[:storage_update_id] %>"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/media/storage```

**ARGUMENTS**

[The storage's object](#the-storage-object)

**RETURNS**

Returns the ID of the updated storage if the update succeeded.
