## Update an user

Updates the specified user by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

> REQUEST

```shell
curl -X PUT \
  '<%= config[:endpoint] %>/admin/user' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "<%= config[:user_update_id] %>",
    "status": 0,
    "username": "user_test",
    "email": "user_test@uiza.io",
    "avatar": "https://exemple.com/avatar.jpeg",
    "fullname": "User Test",
    "dob": "2000-12-30",
    "gender": 0,
    "password": "123456789",
    "isAdmin": 1
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "<%= config[:user_update_id] %>",
  status: 1,
  username: "user_test",
  email: "user_test@uiza.io",
  avatar: "https://exemple.com/avatar.jpeg",
  fullname: "User Test",
  dob: "2000-12-30",
  gender: 0,
  password: "123456789",
  isAdmin: 1
}

begin
  user = Uiza::User.update params
  puts user.id
  puts user.username
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.user import User
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:app_id] %>"
uiza.app_id = "<%= config[:token] %>"


user_data = {
  "id": "<%= config[:user_update_id] %>",
  "status": 1,
  "username": "user_test",
  "email": "user_test@uiza.io",
  "avatar": "https://exemple.com/avatar.jpeg",
  "fullname": "User Test",
  "dob": "2000-12-30",
  "gender": 0,
  "password": "123456789",
  "isAdmin": 1
}

try:
  res, status_code = User().update(**user_data)

  print("res ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "status" => 1,
  "username" => "user_test",
  "email" => "user_test@uiza.io",
  "avatar" => "https://exemple.com/avatar.jpeg",
  "fullname" => "User Test",
  "dob" => "2000-12-30",
  "gender" => 0,
  "password" => "123456789",
  "isAdmin" => 1
];

try {
  Uiza\User::update("<%= config[:user_update_id] %>", $params);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.User;
import io.uiza.model.User.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("status", Status.ACTIVE.getVal());
    params.put("username", "user_test");
    params.put("email", "user_test@uiza.io");
    params.put("avatar", "https://exemple.com/avatar.jpeg");
    params.put("fullname", "User Test");
    params.put("dob", "2000-12-30");
    params.put("gender", 0);
    params.put("password", "123456789");
    params.put("isAdmin", 1);

    try {
      JsonObject response = User.update("<user-id>", params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:user_update_id] %>',
  'status': 1,
  'username': 'user_test',
  'email': 'user_test@uiza.io',
  'avatar': 'https://exemple.com/avatar.jpeg',
  'fullname': 'User Test',
  'dob': '2000-12-30',
  'gender': 0,
  'password': '123456789',
  'isAdmin': 1
};

uiza.user.update(params)
  .then((res) => {
    // Identifier of user wanted to update
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/user"
)

func init() {
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.UserUpdateParams{
  ID: uiza.String("<%= config[:user_update_id] %>"),
  Status: uiza.Int64(1),
  Username: uiza.String("user_test"),
  Email: uiza.String("user_test@uiza.io"),
  Avatar: uiza.String("https://exemple.com/avatar1.jpeg"),
  Fullname: uiza.String("User Test"),
  Dob: uiza.String("2000-12-30"),
  Gender: uiza.Int64(0),
  Password: uiza.String("123456789"),
  IsAdmin: uiza.Int64(1),
}
response, err := user.Update(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.User.Update(new UpdateUserParameter()
  {
    Id = "<%= config[:user_update_id] %>",
    Status = 1,
    UserName = "user_test",
    Email = "user_test@uiza.io",
    Avatar = "https://exemple.com/avatar.jpeg",
    FullName = "User Test",
    DOB = "2000-12-30",
    Gender = 0,
    Password = "123456789",
    IsAdmin = 1
  });

  Console.WriteLine(string.Format("Update User Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

> RESPONSE

```json
{
  "id": "<%= config[:user_update_id] %>",
  "isAdmin": 1,
  "username": "user_test",
  "email": "user_test@uiza.io",
  "updatedAt": "2018-06-22T00:00:00.000Z",
  "createdAt": "2018-06-22T18:05:47.000Z"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/admin/user```


**ARGUMENTS**

| Parameter | Description | Required |
| ------------- | ------------- | ------------- | ------------- |
| **id** *string* | Identifier of user wanted to update | **Yes** |
| **status** *integer* | Status of account ( ``0`` = de-active, ``1`` =  active) | **Yes** |
| **username** *string* | Username of account (used for login instead of email) | **Yes** |
| **email** *string* | Email (used for login instead of username) | **Yes** |
| **password** *text* | Password (from a to Z, 6 to 25 characters) | **Yes** |
| **avatar** *string* | Link of avatar (suggest 300x300) |  |
| **fullname** *string* | Full name of user |  |
| **dob** *date* | Date of birth (MM/DD/YYYY) |  |
| **gender** *integer* | Gender ( ``0`` = Male, ``1`` = Female) |  |
| **isAdmin** *integer* | Set this account isAdmin or not (``1`` = Yes, ``0`` = No) |  |



**RETURNS**

Returns the user object if the update succeeded.
