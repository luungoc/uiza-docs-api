## Retrieve an user

Retrieves the details of an existing user. You need only supply the unique userId that was returned upon user creation.

> REQUEST

```shell
curl -X GET \
  '<%= config[:endpoint] %>/admin/user' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "<%= config[:user_retrieve_id] %>"
}'
```

```ruby
require "uiza"

Uiza.app_id = "<%= config[:app_id] %>"
Uiza.authorization = "<%= config[:token] %>"

begin
  user = Uiza::User.retrieve "<%= config[:user_retrieve_id] %>"
  puts user.id
  puts user.username
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.user import User
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:app_id] %>"
uiza.app_id = "<%= config[:token] %>"

try:
  res, status_code = User().retrieve(id="<%= config[:user_retrieve_id] %>")

  print("res ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAppId("<%= config[:app_id] %>");
Uiza\Base::setAuthorization("<%= config[:token] %>");

try {
  Uiza\User::retrieve("<%= config[:user_retrieve_id] %>");
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.User;
import io.uiza.model.User.*;

public class Main {

  public static void main(String[] args) {
    Uiza.appId = "<%= config[:app_id] %>";
    Uiza.authorization = "<%= config[:token] %>";

    try {
      JsonObject response = User.retrieve("<%= config[:user_retrieve_id] %>");
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.app_id('<%= config[:app_id] %>');
uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:user_retrieve_id] %>'
};

uiza.user.retrieve(params)
  .then((res) => {
    // Identifier of user
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/user"
)

func init() {
  Uiza.AppID = "<%= config[:app_id] %>"
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.UserIDParams{ID: uiza.String("<%= config[:user_retrieve_id] %>")}
response, err := user.Retrieve(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>",
  AppId = "<%= config[:app_id] %>"
});

try
{
  var result = UizaServices.User.Retrieve("<%= config[:user_retrieve_id] %>");

  Console.WriteLine(string.Format("Get User Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

> RESPONSE

```json
{
  "id": "<%= config[:user_retrieve_id] %>",
  "isAdmin": 1,
  "username": "user_test",
  "email": "user_test@uiza.io",
  "updatedAt": "2018-06-22T18:05:47.000Z",
  "createdAt": "2018-06-22T18:05:47.000Z"
}
```

**HTTP Request**

<span class="get-button"> GET </span>
```<%= config[:endpoint] %>/admin/user```



| Header   | Type   | Description | Required |
|-------------|--------|-------------|---------|


**ARGUMENTS**

| Parameter | Type | Description | Required |
| ------------- | ------------- | ------------- | ------------- |
| **id** | *string* | Identifier of user | **Yes** |



**RETURNS**

| Parameter | Type | Description |
| ------------- | ------------- | ------------- |
| **id** | *string* | Identifier of user |
| **isAdmin** | *number* | Determine role admin of user (``0`` = Yes, ``1`` = No)  |
| **username** | *string* | Username of account (used for login instead of email) |
| **email** | *string* | Email (used for login instead of username) |
| **createdAt** | *datetime* | Time created user |
| **updatedAt** | *datetime* | Last edited time of user |
