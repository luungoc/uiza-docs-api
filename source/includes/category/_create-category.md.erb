## Create category


> REQUEST

```shell
curl -X POST \
  '<%= config[:endpoint] %>/media/metadata' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "<%= config[:category_create_name] %>",
    "type": "<%= config[:category_create_type] %>",
    "description": "<%= config[:category_create_description] %>",
    "orderNumber": <%= config[:category_create_order_number] %>,
    "icon":"https://exemple.com/icon.png"
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  name: "<%= config[:category_create_name] %>",
  type: "<%= config[:category_create_type] %>",
  description: "<%= config[:category_create_description] %>",
  orderNumber: <%= config[:category_create_order_number] %>
}

begin
  category = Uiza::Category.create params
  puts category.id
  puts category.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.category import Category
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

category_data = {
  "name": "<%= config[:category_create_name] %>",
  "type": "<%= config[:category_create_type] %>",
  "description": "<%= config[:category_create_description] %>",
  "orderNumber": <%= config[:category_create_order_number] %>
}

try:
  res, status_code = Entity().create(**category_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "name" => "<%= config[:category_create_name] %>",
  "type" => "<%= config[:category_create_type] %>",
  "description" => "<%= config[:category_create_description] %>",
  "orderNumber" => <%= config[:category_create_order_number] %>
];

try {
  $category = Uiza\Category::create($params);

  print_r($category);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Category;
import io.uiza.model.Category.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("name", "<%= config[:category_create_name] %>");
    params.put("type", Type.FOLDER.toString());
    params.put("description", "<%= config[:category_create_description] %>");
    params.put("orderNumber", <%= config[:category_create_order_number] %>);

    try {
      JsonObject response = Category.create(params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'name': '<%= config[:category_create_name] %>',
  'type': '<%= config[:category_create_type] %>',
  'description': '<%= config[:category_create_description] %>',
  'orderNumber': <%= config[:category_create_order_number] %>
};

uiza.category.create(params)
  .then((res) => {
    //Identifier of category has been created
  }).catch((err) => {
    //Error
  });
```

```go
import (
  "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/category"
)

func init() {
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.CategoryCreateParams{
  Name: uiza.String("<%= config[:category_create_name] %>"),
  Type: uiza.String("<%= config[:category_create_type] %>"),
  Description: uiza.String("<%= config[:category_create_description] %>"),
  OrderNumber: <%= config[:category_create_order_number] %>,
}

response, err := category.Create(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.Category.Create(new CreateCategoryParameter()
  {
    Name = string.Format("<%= config[:category_create_name] %>"),
    Type = string.Format("<%= config[:category_create_type] %>"),
    Description = string.Format("<%= config[:category_create_description] %>"),
    OrderNumber = <%= config[:category_create_order_number] %>
  });

  Console.WriteLine(string.Format("Create New Category Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

Categories can be created and added to videos entity by using [category relation](#create-category-relation). The difference between `folder`, `playlist`, `tag` are their purposes.

> RESPONSE

```json
{
  "id": "<%= config[:category_create_id] %>"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/metadata```

**ARGUMENTS**

| Parameter | Description | Required |
| --------- | ----------- | -------- |
| **name** *string* | Name of category, meant to be displayable to end users. | **Yes** |
| **type** *enum* | Allowed values: [ **folder**&vert;**playlist**&vert;**tag** ]. | **Yes** |
| **description** *string* | The category's description, meant to be displayable to end users. |  |
| **orderNumber** *integer* | The category's display order, categories with smaller number will be displayed first. |  |
| **icon** *string* | The URL to the category's icon. |  |



**RETURNS**

Returns a category identifier if the call succeeded.
