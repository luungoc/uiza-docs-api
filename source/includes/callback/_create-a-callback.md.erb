## Create a callback

> REQUEST

```shell
curl -X POST \
  <%= config[:endpoint] %>/media/entity/callback \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "url": "<%= config[:callback_create_url] %>",
    "method": "<%= config[:callback_create_method] %>",
    "jsonData": {
      "data": "<%= config[:callback_create_json_data] %>"
    },
    "headersData": {
      "data": "<%= config[:callback_create_headers_data] %>"
    }
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  url: "<%= config[:callback_create_url] %>",
  method: "<%= config[:callback_create_method] %>",
  jsonData: {
    data: "<%= config[:callback_create_json_data] %>"
  },
  headersData: {
    data: "<%= config[:callback_create_headers_data] %>"
  }
}

begin
  callback = Uiza::Callback.create params
  puts callback.id
  puts callback.url
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.callback import Callback
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

callback_data = {
  "url": "<%= config[:callback_create_url] %>",
  "method": "<%= config[:callback_create_method] %>",
  "jsonData": {
    "data": "<%= config[:callback_create_json_data] %>"
  },
  "headersData": {
    "data": "<%= config[:callback_create_headers_data] %>"
  }
}

try:
  res, status_code = Callback().create(**callback_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "url" => "<%= config[:callback_create_url] %>",
  "method" => "<%= config[:callback_create_method] %>",
  "jsonData" => [
    "data" => "<%= config[:callback_create_json_data] %>"
  ],
  "headersData" => [
    "data" => "<%= config[:callback_create_headers_data] %>"
  ]
];

try {
  $callback = Uiza\Callback::create($params);

  print_r($callback);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Callback;
import io.uiza.model.Callback.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    JsonObject jsonData = new JsonObject();
    jsonData.addProperty("data", "<%= config[:callback_create_json_data] %>");

    JsonObject headersData = new JsonObject();
    headersData.addProperty("data", "<%= config[:callback_create_headers_data] %>");

    Map<String, Object> params = new HashMap<>();
    params.put("url", "<%= config[:callback_create_url] %>");
    params.put("method", Method.POST);
    params.put("jsonData", jsonData);
    params.put("headersData", headersData);

    try {
      JsonObject response = Callback.create(params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'url': '<%= config[:callback_create_url] %>',
  'method': '<%= config[:callback_create_method] %>',
  'jsonData': {
    'data': '<%= config[:callback_create_json_data] %>'
  },
  'headersData': {
    'data': '<%= config[:callback_create_headers_data] %>'
  }
};

uiza.callback.create(params)
  .then((res) => {
    //Identifier of callback has been created
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/callback"
)

func init() {
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.CallbackCreateParams{
  Url:    uiza.String("<%= config[:callback_create_url] %>"),
  Method: "<%= config[:callback_create_method] %>",
  JsonData: {
    data: "<%= config[:callback_create_json_data] %>"},
  HeadersData: {
    data: "<%= config[:callback_create_headers_data] %>"},
  }

response, err := callback.Create(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.Callback.Create(new CreateCallbackParameter()
  {
    Url = "<%= config[:callback_create_url] %>",
    Method = "<%= config[:callback_create_method] %>",
    JsonData = {
      data = "<%= config[:callback_create_json_data] %>"
    },
    HeadersData = {
      data = "<%= config[:callback_create_headers_data] %>"
    }
  });

  Console.WriteLine(string.Format("Create New Callback Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

This API will allow you setup a callback to your server when an entity is completed for upload or public

> RESPONSE

```json
{
  "id": "<%= config[:callback_create_id] %>"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/entity/callback```

**ARGUMENTS**

| Parameter  | Description | Required |
| ------------- | ------------- | ------------- |
| **url** *string* | The callback URL. | **Yes** |
| **method** *enum* | HTTP method of callback. Should only be `POST` or `GET` | **Yes** |
| **jsonData** *object* | Extra data you want to attach when callback is called. |  |
| **headersData** *object* | The headers you want the callback to attach. |  |


**RETURNS**

Returns a callback identifier if the call succeeded.
